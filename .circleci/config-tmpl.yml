workflows:
  version: 2.1
  my-workflow:
    jobs:
      - pull-approle-ids
      - generate-vault-token:
          requires:
            - pull-approle-ids
      - slack-notifiacatoin-revoking:
          requires:
            - pull-approle-ids
      - get-aws-key:
          requires:
            - generate-vault-token
      - plan-web:
          requires:
            - get-aws-key
      - slack-notifiacatoin-terraform:
          requires:
            - plan-web
      - clean-up-env:
          requires:
            - plan-web
version: 2.1
executors:
  my-executor:
    docker:
      - image: circleci/node:4.8.2
    working_directory: /tmp
jobs:
  pull-approle-ids:
    executor: my-executor
    steps:
      - run: mkdir -p workspace
      - run: 
         name: "Pull Approle Secret ID & Role ID"
         command: |
           echo 'export ROLE_ID=$(curl \
           --header "X-Vault-Token: VAULT_INIT_TOKEN_REPLACE" \
           --request GET \
           '${VAULT_ADDR}/v1/auth/approle/role/aws/role-id' | jq -r '.data.role_id')' >> $BASH_ENV

           echo 'export SECRET_ID=$(curl \
           --header "X-Vault-Token: VAULT_INIT_TOKEN_REPLACE" \
           --request POST \
           '${VAULT_ADDR}/v1/auth/approle/role/aws/secret-id' | jq -r '.data.secret_id')' >> $BASH_ENV

           source $BASH_ENV
           echo "{" > workspace/ids-output.json
           echo "  \"secret_id\": \"${SECRET_ID}\"," >> workspace/ids-output.json
           echo "  \"role_id\": \"${ROLE_ID}"\" >> workspace/ids-output.json
           echo "}" >> workspace/ids-output.json

           cat workspace/ids-output.json
      - persist_to_workspace:
          root: workspace
          paths:
            - ids-output.json
  generate-vault-token:
    executor: my-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
         name: "Login with AppRole and Get Vault Token"
         command: |
           cat /tmp/workspace/ids-output.json

           export VAULT_TOKEN=$(curl \
            --request POST \
            --data @/tmp/workspace/ids-output.json \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r '.auth.client_token')

           echo "VAULT_TOKEN=${VAULT_TOKEN}" > workspace/vtoken
      - persist_to_workspace:
          root: workspace
          paths:
            - vtoken
  slack-notifiacatoin-revoking:
    executor: my-executor
    steps:
      - run:
         name: "Send a Message to Vault Admin"
         command: |
           curl -X POST \
             ${SLACK_URL} \
             -H 'content-type: application/json' \
             -d '{
               "text": "Vault Init Token has been used just now. Please visit here to revoke it. https://cf-vault-kabu.cfapps.io/ui/vault/access/leases/list/auth/token/create/"
             }'
  get-aws-key:
    executor: my-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
         name: "Get AWS Key via Vault"
         command: |
           source workspace/vtoken
           echo ${VAULT_TOKEN}
 
           curl \
             --header "X-Vault-Token: ${VAULT_TOKEN}" \
             ${VAULT_ADDR}/v1/aws/creds/tf-demo-role | jq -r '.data | .access_key, .secret_key' > workspace/tmp

           cat workspace/tmp | head -n 1 | awk '{print "ACCESS_KEY=" $1}' > workspace/key
           cat workspace/tmp | tail -n 1 | awk '{print "SECRET_KEY=" $1}' >> workspace/key

      - persist_to_workspace:
          root: workspace
          paths:
            - key
  plan-web:
    docker:
      - image: circleci/node:4.8.2
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
         name: "Set AWS Key in the Variables Storage"
         command: |
           cat /tmp/workspace/key
           source /tmp/workspace/key

           sed -i -e "s|WS_ID_REPLACE|${TF_WORKSPACE_ID}|g" var-template.json
           sed 's|KEY_REPLACE|access_key|g' var-template.json > access_key.json
           sed 's|KEY_REPLACE|secret_key|g' var-template.json > secret_key.json

           sed -i -e "s|VALUE_REPLACE|${ACCESS_KEY}|g" access_key.json
           sed -i -e "s|VALUE_REPLACE|${SECRET_KEY}|g" secret_key.json

           cat access_key.json
           cat secret_key.json

           curl \
              --header "Authorization: Bearer ${TF_TOKEN}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @access_key.json \
              https://app.terraform.io/api/v2/vars

           curl \
              --header "Authorization: Bearer ${TF_TOKEN}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @secret_key.json \
              https://app.terraform.io/api/v2/vars

           rm ./access_key.json
           rm ./secret_key.json
      - run:
         name: "Upload TF Config"
         command: |
           ls -ltrR
           tar -zcvf tf.tar.gz -C . main.tf output.tf variables.tf

           echo '{"data":{"type":"configuration-version"}}' > ./create_config_version.json

           UPLOAD_URL=($(curl \
             --header "Authorization: Bearer ${TF_TOKEN}" \
             --header "Content-Type: application/vnd.api+json" \
             --request POST \
             --data @create_config_version.json \
             https://app.terraform.io/api/v2/workspaces/${TF_WORKSPACE_ID}/configuration-versions \
             | jq -r '.data.attributes."upload-url"'))

           curl \
             --header "Content-Type: application/octet-stream" \
             --request PUT \
             --data-binary @tf.tar.gz \
             $UPLOAD_URL

           rm ./create_config_version.json
           rm ./tf.tar.gz
  slack-notifiacatoin-terraform:
    executor: my-executor
    steps:
      - run:
         name: "Send a Message to SRE"
         command: |
           RUN_ID=($(curl \
             --header "Authorization: Bearer ${TF_TOKEN}" \
             --header "Content-Type: application/vnd.api+json" \
             https://app.terraform.io/api/v2/workspaces/${TF_WORKSPACE_ID}/runs | jq -r '.data[0].id'))

           TEXT="Plan has finished. Visit here to review Terrafrom. https://app.terraform.io/app/tkaburagi/workspaces/${TF_WORKSPACE_NAME}/runs/${RUN_ID}"

           curl -X POST \
             ${SLACK_URL} \
             -H 'content-type: application/json' \
             -d '{
               "text": "'"${TEXT}"'"
             }'
  clean-up-env:
     executor: my-executor
     steps:
       - run:
          name: "Clean Up Environment"
          command: |
            rm -rf /tmp/workspace
